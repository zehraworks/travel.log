// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  name           String?

  bio   String?
  image String?

  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  PinnedLocations PinnedLocation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  expires_at               Int?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  published      Boolean          @default(false)
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String           @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PinnedLocation PinnedLocation[]
}

model PinnedLocation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  desc      String?
  latitude  Float
  longitude Float
  status    Status     @default(COMPLETED)
  continent Continent?
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  post      Post?      @relation(fields: [postId], references: [id])
  postId    String?    @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Status {
  PLANNED
  ONGOING
  COMPLETED
}

enum Continent {
  ASIA
  AFRICA
  NORTH_AMERICA
  SOUTH_AMERICA
  ANTARCTICA
  EUROPE
  AUSTRALIA
}
